// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;
import 'package:flutter_money/http/user.dart';
import 'package:flutter_money/model/json_to_dart_test_model_entity.dart';
import 'package:flutter_money/model/product_list_model.dart';
import 'package:flutter_money/wajiu/model/category_second_type_list_model.dart';
import 'package:flutter_money/wajiu/model/category_type_list_model.dart';
import 'package:flutter_money/wajiu/model/common_request_model.dart';
import 'package:flutter_money/wajiu/model/home_main_model.dart';
import 'package:flutter_money/wajiu/model/home_productlist_model.dart';
import 'package:flutter_money/wajiu/model/joined_product_list_model.dart';
import 'package:flutter_money/wajiu/model/login_model.dart';
import 'package:flutter_money/wajiu/model/mingzhuangxianhuo_product_list_model.dart';
import 'package:flutter_money/wajiu/model/order_list_item_data_model.dart';
import 'package:flutter_money/wajiu/model/orderlist.dart';
import 'package:flutter_money/wajiu/model/orderlist_new.dart';
import 'package:flutter_money/wajiu/model/product_list_model.dart';
import 'package:flutter_money/wajiu/model/shop_car_model.dart';
import 'package:flutter_money/wajiu/model/wajiu_balance_model.dart';

JsonConvert jsonConvert = JsonConvert();
typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);
typedef EnumConvertFunction<T> = T Function(String value);

class JsonConvert {
	static final Map<String, JsonConvertFunction> convertFuncMap = {
		(User).toString(): User.fromJson,
		(JsonToDartTestModelEntity).toString(): JsonToDartTestModelEntity.fromJson,
		(ProductListModel).toString(): ProductListModel.fromJson,
		(Result).toString(): Result.fromJson,
		(ListData).toString(): ListData.fromJson,
		(CategorySecondTypeListModel).toString(): CategorySecondTypeListModel.fromJson,
		(Result).toString(): Result.fromJson,
		(BannerList).toString(): BannerList.fromJson,
		(ParameterList).toString(): ParameterList.fromJson,
		(ListBean).toString(): ListBean.fromJson,
		(CategoryTypeListModel).toString(): CategoryTypeListModel.fromJson,
		(Result).toString(): Result.fromJson,
		(TypeList).toString(): TypeList.fromJson,
		(CommonRequestModel).toString(): CommonRequestModel.fromJson,
		(HomeMainModel).toString(): HomeMainModel.fromJson,
		(Result).toString(): Result.fromJson,
		(KindSetList).toString(): KindSetList.fromJson,
		(ProductInfoList).toString(): ProductInfoList.fromJson,
		(WorldHotProducts).toString(): WorldHotProducts.fromJson,
		(NewProductPriorities).toString(): NewProductPriorities.fromJson,
		(BrandHall).toString(): BrandHall.fromJson,
		(BannerInternational).toString(): BannerInternational.fromJson,
		(IndexList).toString(): IndexList.fromJson,
		(Advertising).toString(): Advertising.fromJson,
		(Advertising0).toString(): Advertising0.fromJson,
		(Ranking).toString(): Ranking.fromJson,
		(Focus_picture).toString(): Focus_picture.fromJson,
		(AppNewIndexCategories).toString(): AppNewIndexCategories.fromJson,
		(AppIndex).toString(): AppIndex.fromJson,
		(Home_button).toString(): Home_button.fromJson,
		(Announcement).toString(): Announcement.fromJson,
		(HomeProductListModel).toString(): HomeProductListModel.fromJson,
		(Result).toString(): Result.fromJson,
		(HotWorldProductList).toString(): HotWorldProductList.fromJson,
		(JoinedProductListModel).toString(): JoinedProductListModel.fromJson,
		(Result).toString(): Result.fromJson,
		(ShopcarList).toString(): ShopcarList.fromJson,
		(ProductList).toString(): ProductList.fromJson,
		(LoginModel).toString(): LoginModel.fromJson,
		(Result).toString(): Result.fromJson,
		(Admin).toString(): Admin.fromJson,
		(Fguser).toString(): Fguser.fromJson,
		(UserLinkManage).toString(): UserLinkManage.fromJson,
		(MingzhuangxianhuoProductListModel).toString(): MingzhuangxianhuoProductListModel.fromJson,
		(Result).toString(): Result.fromJson,
		(Noticelist).toString(): Noticelist.fromJson,
		(Productlist).toString(): Productlist.fromJson,
		(Operate).toString(): Operate.fromJson,
		(ProductStorage).toString(): ProductStorage.fromJson,
		(OrderListItemDataModel).toString(): OrderListItemDataModel.fromJson,
		(Result).toString(): Result.fromJson,
		(Delivery).toString(): Delivery.fromJson,
		(OrdertListModel).toString(): OrdertListModel.fromJson,
		(Result).toString(): Result.fromJson,
		(ListBean).toString(): ListBean.fromJson,
		(GoodsLists).toString(): GoodsLists.fromJson,
		(OrdertListNewModel).toString(): OrdertListNewModel.fromJson,
		(Result).toString(): Result.fromJson,
		(ListBean).toString(): ListBean.fromJson,
		(OrdersBean).toString(): OrdersBean.fromJson,
		(OrderListProductBean).toString(): OrderListProductBean.fromJson,
		(ProductListModel).toString(): ProductListModel.fromJson,
		(Result).toString(): Result.fromJson,
		(ProductList).toString(): ProductList.fromJson,
		(ShopCarModel).toString(): ShopCarModel.fromJson,
		(Result).toString(): Result.fromJson,
		(ShopCarList).toString(): ShopCarList.fromJson,
		(WajiuBalanceModel).toString(): WajiuBalanceModel.fromJson,
		(Result).toString(): Result.fromJson,
		(BalanceList).toString(): BalanceList.fromJson,
	};

  T? convert<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    if (value is T) {
      return value;
    }
    try {
      return _asT<T>(value, enumConvert: enumConvert);
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return null;
    }
  }

  List<T?>? convertList<T>(List<dynamic>? value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => _asT<T>(e,enumConvert: enumConvert)).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

List<T>? convertListNotNull<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) => _asT<T>(e,enumConvert: enumConvert)!).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  T? _asT<T extends Object?>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    final String type = T.toString();
    final String valueS = value.toString();
    if (enumConvert != null) {
      return enumConvert(valueS) as T;
    } else if (type == "String") {
      return valueS as T;
    } else if (type == "int") {
      final int? intValue = int.tryParse(valueS);
      if (intValue == null) {
        return double.tryParse(valueS)?.toInt() as T?;
      } else {
        return intValue as T;
      }
    } else if (type == "double") {
      return double.parse(valueS) as T;
    } else if (type == "DateTime") {
      return DateTime.parse(valueS) as T;
    } else if (type == "bool") {
      if (valueS == '0' || valueS == '1') {
        return (valueS == '1') as T;
      }
      return (valueS == 'true') as T;
    } else if (type == "Map" || type.startsWith("Map<")) {
      return value as T;
    } else {
      if (convertFuncMap.containsKey(type)) {
        if (value == null) {
          return null;
        }
        return convertFuncMap[type]!(Map<String, dynamic>.from(value)) as T;
      } else {
        throw UnimplementedError('$type unimplemented');
      }
    }
  }

	//list is returned by type
	static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
		if(<User>[] is M){
			return data.map<User>((Map<String, dynamic> e) => User.fromJson(e)).toList() as M;
		}
		if(<JsonToDartTestModelEntity>[] is M){
			return data.map<JsonToDartTestModelEntity>((Map<String, dynamic> e) => JsonToDartTestModelEntity.fromJson(e)).toList() as M;
		}
		if(<ProductListModel>[] is M){
			return data.map<ProductListModel>((Map<String, dynamic> e) => ProductListModel.fromJson(e)).toList() as M;
		}
		if(<Result>[] is M){
			return data.map<Result>((Map<String, dynamic> e) => Result.fromJson(e)).toList() as M;
		}
		if(<ListData>[] is M){
			return data.map<ListData>((Map<String, dynamic> e) => ListData.fromJson(e)).toList() as M;
		}
		if(<CategorySecondTypeListModel>[] is M){
			return data.map<CategorySecondTypeListModel>((Map<String, dynamic> e) => CategorySecondTypeListModel.fromJson(e)).toList() as M;
		}
		if(<Result>[] is M){
			return data.map<Result>((Map<String, dynamic> e) => Result.fromJson(e)).toList() as M;
		}
		if(<BannerList>[] is M){
			return data.map<BannerList>((Map<String, dynamic> e) => BannerList.fromJson(e)).toList() as M;
		}
		if(<ParameterList>[] is M){
			return data.map<ParameterList>((Map<String, dynamic> e) => ParameterList.fromJson(e)).toList() as M;
		}
		if(<ListBean>[] is M){
			return data.map<ListBean>((Map<String, dynamic> e) => ListBean.fromJson(e)).toList() as M;
		}
		if(<CategoryTypeListModel>[] is M){
			return data.map<CategoryTypeListModel>((Map<String, dynamic> e) => CategoryTypeListModel.fromJson(e)).toList() as M;
		}
		if(<Result>[] is M){
			return data.map<Result>((Map<String, dynamic> e) => Result.fromJson(e)).toList() as M;
		}
		if(<TypeList>[] is M){
			return data.map<TypeList>((Map<String, dynamic> e) => TypeList.fromJson(e)).toList() as M;
		}
		if(<CommonRequestModel>[] is M){
			return data.map<CommonRequestModel>((Map<String, dynamic> e) => CommonRequestModel.fromJson(e)).toList() as M;
		}
		if(<HomeMainModel>[] is M){
			return data.map<HomeMainModel>((Map<String, dynamic> e) => HomeMainModel.fromJson(e)).toList() as M;
		}
		if(<Result>[] is M){
			return data.map<Result>((Map<String, dynamic> e) => Result.fromJson(e)).toList() as M;
		}
		if(<KindSetList>[] is M){
			return data.map<KindSetList>((Map<String, dynamic> e) => KindSetList.fromJson(e)).toList() as M;
		}
		if(<ProductInfoList>[] is M){
			return data.map<ProductInfoList>((Map<String, dynamic> e) => ProductInfoList.fromJson(e)).toList() as M;
		}
		if(<WorldHotProducts>[] is M){
			return data.map<WorldHotProducts>((Map<String, dynamic> e) => WorldHotProducts.fromJson(e)).toList() as M;
		}
		if(<NewProductPriorities>[] is M){
			return data.map<NewProductPriorities>((Map<String, dynamic> e) => NewProductPriorities.fromJson(e)).toList() as M;
		}
		if(<BrandHall>[] is M){
			return data.map<BrandHall>((Map<String, dynamic> e) => BrandHall.fromJson(e)).toList() as M;
		}
		if(<BannerInternational>[] is M){
			return data.map<BannerInternational>((Map<String, dynamic> e) => BannerInternational.fromJson(e)).toList() as M;
		}
		if(<IndexList>[] is M){
			return data.map<IndexList>((Map<String, dynamic> e) => IndexList.fromJson(e)).toList() as M;
		}
		if(<Advertising>[] is M){
			return data.map<Advertising>((Map<String, dynamic> e) => Advertising.fromJson(e)).toList() as M;
		}
		if(<Advertising0>[] is M){
			return data.map<Advertising0>((Map<String, dynamic> e) => Advertising0.fromJson(e)).toList() as M;
		}
		if(<Ranking>[] is M){
			return data.map<Ranking>((Map<String, dynamic> e) => Ranking.fromJson(e)).toList() as M;
		}
		if(<Focus_picture>[] is M){
			return data.map<Focus_picture>((Map<String, dynamic> e) => Focus_picture.fromJson(e)).toList() as M;
		}
		if(<AppNewIndexCategories>[] is M){
			return data.map<AppNewIndexCategories>((Map<String, dynamic> e) => AppNewIndexCategories.fromJson(e)).toList() as M;
		}
		if(<AppIndex>[] is M){
			return data.map<AppIndex>((Map<String, dynamic> e) => AppIndex.fromJson(e)).toList() as M;
		}
		if(<Home_button>[] is M){
			return data.map<Home_button>((Map<String, dynamic> e) => Home_button.fromJson(e)).toList() as M;
		}
		if(<Announcement>[] is M){
			return data.map<Announcement>((Map<String, dynamic> e) => Announcement.fromJson(e)).toList() as M;
		}
		if(<HomeProductListModel>[] is M){
			return data.map<HomeProductListModel>((Map<String, dynamic> e) => HomeProductListModel.fromJson(e)).toList() as M;
		}
		if(<Result>[] is M){
			return data.map<Result>((Map<String, dynamic> e) => Result.fromJson(e)).toList() as M;
		}
		if(<HotWorldProductList>[] is M){
			return data.map<HotWorldProductList>((Map<String, dynamic> e) => HotWorldProductList.fromJson(e)).toList() as M;
		}
		if(<JoinedProductListModel>[] is M){
			return data.map<JoinedProductListModel>((Map<String, dynamic> e) => JoinedProductListModel.fromJson(e)).toList() as M;
		}
		if(<Result>[] is M){
			return data.map<Result>((Map<String, dynamic> e) => Result.fromJson(e)).toList() as M;
		}
		if(<ShopcarList>[] is M){
			return data.map<ShopcarList>((Map<String, dynamic> e) => ShopcarList.fromJson(e)).toList() as M;
		}
		if(<ProductList>[] is M){
			return data.map<ProductList>((Map<String, dynamic> e) => ProductList.fromJson(e)).toList() as M;
		}
		if(<LoginModel>[] is M){
			return data.map<LoginModel>((Map<String, dynamic> e) => LoginModel.fromJson(e)).toList() as M;
		}
		if(<Result>[] is M){
			return data.map<Result>((Map<String, dynamic> e) => Result.fromJson(e)).toList() as M;
		}
		if(<Admin>[] is M){
			return data.map<Admin>((Map<String, dynamic> e) => Admin.fromJson(e)).toList() as M;
		}
		if(<Fguser>[] is M){
			return data.map<Fguser>((Map<String, dynamic> e) => Fguser.fromJson(e)).toList() as M;
		}
		if(<UserLinkManage>[] is M){
			return data.map<UserLinkManage>((Map<String, dynamic> e) => UserLinkManage.fromJson(e)).toList() as M;
		}
		if(<MingzhuangxianhuoProductListModel>[] is M){
			return data.map<MingzhuangxianhuoProductListModel>((Map<String, dynamic> e) => MingzhuangxianhuoProductListModel.fromJson(e)).toList() as M;
		}
		if(<Result>[] is M){
			return data.map<Result>((Map<String, dynamic> e) => Result.fromJson(e)).toList() as M;
		}
		if(<Noticelist>[] is M){
			return data.map<Noticelist>((Map<String, dynamic> e) => Noticelist.fromJson(e)).toList() as M;
		}
		if(<Productlist>[] is M){
			return data.map<Productlist>((Map<String, dynamic> e) => Productlist.fromJson(e)).toList() as M;
		}
		if(<Operate>[] is M){
			return data.map<Operate>((Map<String, dynamic> e) => Operate.fromJson(e)).toList() as M;
		}
		if(<ProductStorage>[] is M){
			return data.map<ProductStorage>((Map<String, dynamic> e) => ProductStorage.fromJson(e)).toList() as M;
		}
		if(<OrderListItemDataModel>[] is M){
			return data.map<OrderListItemDataModel>((Map<String, dynamic> e) => OrderListItemDataModel.fromJson(e)).toList() as M;
		}
		if(<Result>[] is M){
			return data.map<Result>((Map<String, dynamic> e) => Result.fromJson(e)).toList() as M;
		}
		if(<Delivery>[] is M){
			return data.map<Delivery>((Map<String, dynamic> e) => Delivery.fromJson(e)).toList() as M;
		}
		if(<OrdertListModel>[] is M){
			return data.map<OrdertListModel>((Map<String, dynamic> e) => OrdertListModel.fromJson(e)).toList() as M;
		}
		if(<Result>[] is M){
			return data.map<Result>((Map<String, dynamic> e) => Result.fromJson(e)).toList() as M;
		}
		if(<ListBean>[] is M){
			return data.map<ListBean>((Map<String, dynamic> e) => ListBean.fromJson(e)).toList() as M;
		}
		if(<GoodsLists>[] is M){
			return data.map<GoodsLists>((Map<String, dynamic> e) => GoodsLists.fromJson(e)).toList() as M;
		}
		if(<OrdertListNewModel>[] is M){
			return data.map<OrdertListNewModel>((Map<String, dynamic> e) => OrdertListNewModel.fromJson(e)).toList() as M;
		}
		if(<Result>[] is M){
			return data.map<Result>((Map<String, dynamic> e) => Result.fromJson(e)).toList() as M;
		}
		if(<ListBean>[] is M){
			return data.map<ListBean>((Map<String, dynamic> e) => ListBean.fromJson(e)).toList() as M;
		}
		if(<OrdersBean>[] is M){
			return data.map<OrdersBean>((Map<String, dynamic> e) => OrdersBean.fromJson(e)).toList() as M;
		}
		if(<OrderListProductBean>[] is M){
			return data.map<OrderListProductBean>((Map<String, dynamic> e) => OrderListProductBean.fromJson(e)).toList() as M;
		}
		if(<ProductListModel>[] is M){
			return data.map<ProductListModel>((Map<String, dynamic> e) => ProductListModel.fromJson(e)).toList() as M;
		}
		if(<Result>[] is M){
			return data.map<Result>((Map<String, dynamic> e) => Result.fromJson(e)).toList() as M;
		}
		if(<ProductList>[] is M){
			return data.map<ProductList>((Map<String, dynamic> e) => ProductList.fromJson(e)).toList() as M;
		}
		if(<ShopCarModel>[] is M){
			return data.map<ShopCarModel>((Map<String, dynamic> e) => ShopCarModel.fromJson(e)).toList() as M;
		}
		if(<Result>[] is M){
			return data.map<Result>((Map<String, dynamic> e) => Result.fromJson(e)).toList() as M;
		}
		if(<ShopCarList>[] is M){
			return data.map<ShopCarList>((Map<String, dynamic> e) => ShopCarList.fromJson(e)).toList() as M;
		}
		if(<WajiuBalanceModel>[] is M){
			return data.map<WajiuBalanceModel>((Map<String, dynamic> e) => WajiuBalanceModel.fromJson(e)).toList() as M;
		}
		if(<Result>[] is M){
			return data.map<Result>((Map<String, dynamic> e) => Result.fromJson(e)).toList() as M;
		}
		if(<BalanceList>[] is M){
			return data.map<BalanceList>((Map<String, dynamic> e) => BalanceList.fromJson(e)).toList() as M;
		}

		debugPrint("${M.toString()} not found");
	
		return null;
}

	static M? fromJsonAsT<M>(dynamic json) {
		if (json is List) {
			return _getListChildType<M>(json.map((e) => e as Map<String, dynamic>).toList());
		} else {
			return jsonConvert.convert<M>(json);
		}
	}
}